the sender uses an ephemeral key pair >
The sender generates a shared secret using the Elliptic Curve Diffie-Hellman (ECDH) >
The sender derive a stealth address for interaction with the recipient >
A stealth address is generated by adding the point obtained from multiplying the Diffie-Hellman (DH) secret with the generator point to the recipient’s public key.


Imaginando que você deposite dinheiro em alguma exchange centralizada, como, por exemplo, a Binance, a Binance geralmente tem toda sua identidade, com CPF, RG, endereço, número de telefone, e se você transferiu dinheiro pra corretora, pra Binance, nesse caso, a Binance, por inferência, sabe que aquela carteira é sua e pertence a você, e como várias informações da carteira estão completamente públicas na rede, a Binance agora sabe todo seu histórico financeiro na rede e tem acesso a todas as transações que você já fez, incluindo quantias, pra quem você enviou ou de quem você recebeu e etc. e é claro, na rede também é mostrado quantos e quais tokens você tem na carteira, então, basicamente, a Binance agora tem acesso a toda sua vida financeira passada, atual e futura na rede.
E é claro, além de ferir a privacidade da pessoa, pode por em risco a integridade física. Enfim, isso não é lá muito legal em uma rede pública, e é menos ainda no nosso caso, numa rede privada "governamental" suportada e desenvolvida por uma empresa pública que tem que seguir as leis do país, como a LGPD, e é claro, leis do mundo inteiro, no caso dos acordos entre países, a gente tem que proteger as informações sensíveis dos clientes e usuários em geral.


Passo 1: O pagador gera um par de chaves efêmeras e as publica na rede
Passo 2: O pagador gera uma chave secreta por meio do protoloco ECDH, assim, é criado a chave secreta de Diffie Hellman
Passo 3: O pagador faz o hashing dessa chave secreta e usa essa chave pra gerar a chave pública do endereço stealth
Passo 4: Agora, o pagador usa a chave pública do endereço stealth pra derivar o efetivo endereço stealth

Passo 5: Agora, com o endereço stealth gerado, o pagador pode fazer a transferência de tokens, valores, quantias e etc para o stealth address gerado

Passo 6: Um evento, que, geralmente tme o nome de "Announcement" é anunciado na rede por meio do contrato baseado no padrão de contratos ERC-6634

Passo 7: O recebedor "escaneia" todos os eventos "Announcement" emitidos na rede, em cada um dos eventos é emitido algumas informações relacionadas ao endereço stealth, como, por exemplo, o próprio endereço stealth, a chave pública da chave secreta e alguns metadados. Os metadados emitidos são definidos pelo próprio pagador na hora de fazer a chamada do método do contrato que emite o evento.

Passo 8: O recebedor utiliza algumas dessas informações emitidas no evento, como, por exemplo, a chave pública da chave secreta.

Passo 9: O recebedor agora executa alguns processamentos similares aos realizados no processo de geração do endereço stealth, como, por exemplo, multiplica chave com chave, adiciona uma na outra, faz o hashing da chave secreta e etc.

Passo 10: No final dessas operações, o recebedor, o usuário que está fazendo esse processo de escaneamento na rede vai ter como resultado um endereço.

Passo 11: Agora, esse usuário vai comparar o stealth address que foi emitido no evento, lembrando que, no evento de "Announcement" são emitidas algumas informações, e uma delas é o próprio endereço stealth em si.

Passo 12: Agora, o usuário pega o endereço stealth emitido no evento e compara com o endereço resultado dessas operações feitas anteriormente, se, no final, o endereço que ele teve como resultado de todo o processamento é igual ao stealth address que foi emitido no evento, quer dizer que aquele endereço pertence a ele.

Passo 13: Agora o usuário deriva a chave privada do endereço stealth por meio da chave privada de spending, que só ele tem acesso.

Notas:
Somente o recebedor pode transferir os tokens depositados no stealth address porque, pra transferir os tokens, como é natural e comum, é necessário a chave privada do endereço stealth para se realizar transações com o endereço,
e o único meio de se obter a chave privada do endereço stealth é por meio da chave privada de spending relativa ao endereço stealth, que só o recebedor deve ter acesso.
tendo posse da chave privada de spending relativa a aquele endereço, e a chave privada relativa ao endereço é a chave privada de spending do recebedor.

---

Passo 1: O pagador gera um par de chaves efêmeras
Passo 2: O pagador gera uma chave secreta por meio do protoloco ECDH, assim, é criado a chave secreta de Diffie Hellman
Passo 3: O pagador faz o hashing dessa chave secreta
Passo 4: Agora, o pagador multiplica a chave secreta com o ponto gerador da curva elíptica

----------

The sender performs the following steps:
1 - Generate an ephemeral key pair (p,P) and publish the coordinates P. > 
2 - Multiply the randomly generated ephemeral private key with the recipient’s public key: k=p×R. >
3 - This creates the DH secret
4 - Hash the shared DH secret
5 - Multiply the hashed shared secret with the generator point of the elliptic curve
6 - Add the result of (4) to the recipient’s public key to generate the stealth adddress' public key
NOTE: The stealth address' private key is generated on the parsing process


Stealth Address Parsing:

1 - Multiply P with the private key r to derive the shared secret: k=r×P .
2 - Hash the derived shared secret kh=h(k) .
3 - Add the result of step 2 (derived shared secret) to the own private key: rst=kh+r .
4 - Multiply the result of step 3 with the generator point (G) to derive the stealth public key: Rst=rst×G .
5 - Hash the stealth public key and take the least significant 20 bytes to derive the Ethereum address: Raddrst=h(Rst)[−20:] .

Upon deriving the point Rst , the recipient can determine whether Raddrst has been the recipient of the transaction or whether Raddrst received any assets. If the check is successful, the recipient may store the private key rst .
To conclude, the protocol leverages the fact that kh×G+P=(kh+p)×G . This allows for deriving a stealth address through two different paths, while only the recipient can generate the private key for the stealth address.


-----------

DUAL KEY SCHEME

Stealth addresses on Ethereum require the recipient to use their private key r during the process. This has important implications for both security and user experience. First, users may encounter situations where they must use their private keys for operations outside of their cold storage, which poses significant security risks. Second, users cannot delegate the parsing process to a third-party service as it involves sharing the private key and compromising its confidentiality. Therefore, users must perform the parsing process themselves in a local environment.

Researchers have developed a solution to these issues, the DKSAP, which improves both the user experience and security [13], [14], [15]. The DKSAP is an extension of the ISAP and introduces an additional key pair exclusively used for the parsing process. Recipients have two key pairs — scanning and spending keys — represented as (rSC,RSC) and (rSP,RSP) , respectively. Equipping the recipient with two separate key pairs, the scanning key pair, which is still used in the DH secret generation, can be partially separated from the stealth address generation. To use the DKSAP, the sender needs to follow these steps:

1 - Multiply the randomly generated ephemeral private key with the scanning public key of the recipient: k=p×RSC .

2 - Hash the shared secret kh=h(k) and multiply the result with the generator point Kh=kh×G .

3 - Add the result of (2) to the recipient’s spending public key: Rst=Kh+RSP .

It is important to note that the recipient can share the scanning private key rSC with a third-party parsing provider without compromising the spending private key. Using the scanning key, the parsing provider can take on the parsing task and notify users when an incoming stealth address transaction occurs. However, without access to the spending private key rSP , parsing providers cannot access the stealth address.
